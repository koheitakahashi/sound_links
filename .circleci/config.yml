version: 2.1

orbs:
  aws-cli: circleci/aws-cli@2.0.3
  aws-ecr: circleci/aws-ecr@7.2.0
  aws-ecs: circleci/aws-ecs@2.2.1

executors:
  api_executor:
    docker:
      - image: cimg/ruby:3.0.3
        environment:
          BUNDLE_JOBS: 3
          BUNDLE_RETRY: 3
          BUNDLE_PATH: ~/project/api/vendor/bundle
          PGHOST: 127.0.0.1
          PGUSER: user
          RAILS_ENV: test
      - image: circleci/postgres:12.3
        environment:
          POSTGRES_USER: postgres
          POSTGRES_DB: sound_links_test
          POSTGRES_PASSWORD: "password"
  frontend_executor:
    docker:
      - image: circleci/node:14.3
        environment:
          NODE_ENV: test

commands:
  setup_api:
    steps:
      - restore_cache:
         keys:
           - gem-cache-v1-{{ checksum "~/project/api/Gemfile.lock" }}
           - gem-cache-v1

      - run:
          name: Update bundler
          command: gem update bundler
          working_directory: ~/project/api

      - run:
          name: Set bundle config clean
          command: bundle config set clean "true"
          working_directory: ~/project/api

      - run:
          name: Install gems
          command: bundle check || bundle install
          working_directory: ~/project/api

      - save_cache:
          key: gem-cache-v1-{{ checksum "~/project/api/Gemfile.lock" }}
          paths:
            - ~/project/api/vendor/bundle
  setup_frontend:
    steps:
      - restore_cache:
          keys:
            - v1-dependencies-{{ checksum "~/project/frontend/package.json" }}
          working_directory: ~/project/frontend

      - run:
          name: Install package
          command: yarn install
          working_directory: ~/project/frontend

      - save_cache:
          paths:
            - node_modules
          key: v1-dependencies-{{ checksum "~/project/frontend/package.json" }}

jobs:
  api_test:
    executor: api_executor
    steps:
      - checkout
      - setup_api
      - run:
          name: Run Lint
          command: bundle exec rubocop
          working_directory: ~/project/api

      - run:
          name: Wait for DB
          command: dockerize -wait tcp://localhost:5432 -timeout 1m
          working_directory: ~/project/api

      - run:
          name: Database setup
          command: bin/rails db:schema:load --trace
          working_directory: ~/project/api

      - run:
          name: Run RSpec
          command: bundle exec rspec
          working_directory: ~/project/api

      - store_test_results:
          path: tmp/test-results
      - store_artifacts:
          path: /tmp/test-results
          destination: test-results
      - store_artifacts:
          path: /home/circleci/project/tmp/screenshots

  frontend_test:
    executor: frontend_executor
    steps:
      - checkout
      - setup_frontend
      - run:
          name: test
          command: yarn test:unit
          working_directory: ~/project/frontend

  build_and_push_image_api:
    machine:
      image: ubuntu-1604:201903-01
    steps:
      - aws-cli/install:
          override-installed: true
      - checkout
      - aws-ecr/build-and-push-image:
          account-url: AWS_ACCOUNT_URL
          repo: "sound-links-api"
          region: AWS_REGION
          tag: "${CIRCLE_SHA1}"
          path: ./api/

  build_and_push_image_frontend:
    machine:
      image: ubuntu-1604:201903-01
    steps:
      - aws-cli/install:
          override-installed: true
      - checkout
      - aws-ecr/build-and-push-image:
          account-url: AWS_ACCOUNT_URL
          repo: "sound-links-frontend"
          region: AWS_REGION
          tag: "${CIRCLE_SHA1}"
          path: ./frontend/

workflows:
  version: 2
  test:
    jobs:
      - api_test:
          filters:
            branches:
              ignore: main
      - frontend_test:
          filters:
            branches:
              ignore: main

  test_and_deploy:
    jobs:
      - api_test:
          filters:
            branches:
              only: main
      - frontend_test:
          filters:
            branches:
              only: main
      - build_and_push_image_api:
          requires:
            - api_test
          filters:
            branches:
              only: main
      - build_and_push_image_frontend:
          requires:
            - frontend_test
          filters:
            branches:
              only: main
      - aws-ecs/deploy-service-update:
          requires:
            - build_and_push_image_api
            - build_and_push_image_frontend
          family: "sound-links-task-api"
          service-name: "sound-links-service-api"
          cluster-name: "sound-links-cluster"
          container-image-name-updates: "container=sound-links-container-api,tag=${CIRCLE_SHA1}"
          filters:
            branches:
              only: main
      - aws-ecs/deploy-service-update:
          requires:
            - build_and_push_image_api
            - build_and_push_image_frontend
          family: "sound-links-task-frontend"
          service-name: "sound-links-service-frontend"
          cluster-name: "sound-links-cluster"
          container-image-name-updates: "container=sound-links-container-frontend,tag=${CIRCLE_SHA1}"
          filters:
            branches:
              only: main
